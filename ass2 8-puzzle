import heapq

# Define the 8-puzzle solver class
class Puzzle8:
    def __init__(self, start_state, goal_state):
        self.start_state = start_state  # Starting configuration
        self.goal_state = goal_state    # Goal configuration
        self.moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Movement directions: up, down, left, right
        self.size = 3  # 3x3 grid

    def get_empty_pos(self, state):
        """Return the position of the empty space (represented by 0)"""
        for i in range(self.size):
            for j in range(self.size):
                if state[i][j] == 0:
                    return i, j
        return -1, -1

    def is_valid_move(self, x, y):
        """Check if a move is valid (within bounds of the grid)"""
        return 0 <= x < self.size and 0 <= y < self.size

    def get_neighbors(self, state):
        """Generate the neighboring states by sliding the tiles"""
        neighbors = []
        x, y = self.get_empty_pos(state)
        
        for dx, dy in self.moves:
            nx, ny = x + dx, y + dy
            if self.is_valid_move(nx, ny):
                # Create a new state by swapping empty space with a neighboring tile
                new_state = [row[:] for row in state]  # Make a copy of the current state
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                neighbors.append(new_state)
        return neighbors

    def manhattan_distance(self, state):
        """Calculate the total Manhattan Distance heuristic"""
        distance = 0
        for i in range(self.size):
            for j in range(self.size):
                if state[i][j] != 0:
                    goal_x, goal_y = divmod(self.goal_state.index(state[i][j]), self.size)
                    distance += abs(i - goal_x) + abs(j - goal_y)
        return distance

    def astar_search(self):
        """Perform the A* algorithm to solve the puzzle"""
        # Open list (priority queue) to explore nodes
        open_list = []
        heapq.heappush(open_list, (0 + self.manhattan_distance(self.start_state), 0, self.start_state, []))

        # Set to track visited states to avoid cycles
        visited = set()

        while open_list:
            f, g, state, path = heapq.heappop(open_list)

            # If the goal state is reached, return the path
            if state == self.goal_state:
                return path

            visited.add(tuple(map(tuple, state)))

            for neighbor in self.get_neighbors(state):
                if tuple(map(tuple, neighbor)) not in visited:
                    new_path = path + [neighbor]
                    heapq.heappush(open_list, (g + 1 + self.manhattan_distance(neighbor), g + 1, neighbor, new_path))

        return None  # No solution found

# Function to take user input and format the initial and goal states
def take_input():
    print("Enter the initial state (use 0 for empty space):")
    initial_state = []
    for i in range(3):
        row = list(map(int, input(f"Row {i + 1}: ").split()))
        initial_state.append(row)

    print("Enter the goal state (use 0 for empty space):")
    goal_state = []
    for i in range(3):
        row = list(map(int, input(f"Row {i + 1}: ").split()))
        goal_state.append(row)

    return initial_state, goal_state

def main():
    initial_state, goal_state = take_input()

    # Flatten the states for easy comparison (tuple form to store in set)
    goal_state_flat = [item for sublist in goal_state for item in sublist]

    puzzle = Puzzle8(initial_state, goal_state_flat)
    path = puzzle.astar_search()

    if path:
        print("\nSolution path:")
        for step in path:
            for row in step:
                print(row)
            print()
    else:
        print("\nNo solution found.")

if __name__ == "__main__":
    main()
