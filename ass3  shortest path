import heapq

# Function to take user input and create the graph
def take_input():
    n = int(input("Enter the number of vertices in the graph: "))
    graph = {i: [] for i in range(n)}

    print("Enter the edges (vertex1 vertex2 weight):")
    m = int(input("Enter the number of edges: "))
    for _ in range(m):
        u, v, w = map(int, input("Edge (u, v, weight): ").split())
        graph[u].append((v, w))
        graph[v].append((u, w))  # Since it's an undirected graph

    return graph, n

# Function to implement Prim's Algorithm to find the MST using a greedy approach
def prim_mst(graph, n):
    # To store the Minimum Spanning Tree (MST)
    mst = []
    visited = [False] * n  # Track the vertices included in the MST
    min_heap = [(0, 0)]  # Priority Queue to store the edges (weight, vertex)

    total_weight = 0

    while min_heap:
        weight, u = heapq.heappop(min_heap)  # Pop the vertex with the smallest edge weight

        if visited[u]:
            continue  # Skip if the vertex is already in the MST

        visited[u] = True
        total_weight += weight

        # Add the current vertex to the MST
        if weight != 0:  # Skip the first step where weight is 0 (starting point)
            mst.append((u, weight))

        # Explore the neighbors of the current vertex u
        for v, w in graph[u]:
            if not visited[v]:
                heapq.heappush(min_heap, (w, v))  # Push the neighboring vertices to the heap

    return mst, total_weight

# Main function to take input, run Prim's Algorithm, and print the result
def main():
    graph, n = take_input()

    mst, total_weight = prim_mst(graph, n)

    # Output the Minimum Spanning Tree and its total weight
    print("\nMinimum Spanning Tree (MST):")
    for u, weight in mst:
        print(f"Vertex {u} with edge weight {weight}")

    print(f"\nTotal weight of the MST: {total_weight}")

if __name__ == "__main__":
    main()
